
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[0;38;5;11mnormal[0m [0;38;5;13mx[x<=-0.0001][0m [0;38;5;51mx[abs(x)<0.0001][0m [0;38;5;10mx[x>=0.0001][0m [0;38;5;179m19/01/2038 03:14:07[0m [0;38;5;85m"string"[0m
[0;38;5;35mNA/NaN/NULL[0m [0;38;5;203mFALSE[0m [0;38;5;78mTRUE[0m [0;38;5;39mInf[0m [0;38;5;30m[index][0m [0;48;5;15;38;5;4mstderror[0m [0;48;5;15;38;5;4mwarn[0m [0;48;5;15;38;5;196merror[0m
> #rm(list = ls())
> library(data.table)
> library(stringi)
> library(lubridate)

Attaching package: â€˜lubridateâ€™

The following objects are masked from â€˜package:data.tableâ€™:

    hour, isoweek, mday, minute, month, quarter, second, wday, week,
    yday, year

The following object is masked from â€˜package:baseâ€™:

    date

> #setwd("C:/Anna/MDB")
> load("MDB.RData")
> 
> #MDB_all <- MDB
> #select random sample
> #MDB <- MDB_all[sample.int(nrow(MDB_all),20000),]
> 
> #get pubs dataset
> allpubs <- data.table(read.csv("allpubs.csv", header = FALSE))
> allpubs[, V2 := tolower(V2)]
> allpubs[, twowords := grepl(" ", V2)]
> 
> #get unique transactions. we'll create an alcohol flag for these and then merge them back to the original dataset
> unique_transactions_all <- data.table(description = unique(MDB$Transaction.Description))
> 
> #unqiue pub names
> pubs <- unique(allpubs[twowords == TRUE,V2])
> #remove characters that will give us trouble
> pubs <- gsub("\\(","", pubs)
> pubs <- gsub("\\)","", pubs)
> pubs <- gsub("\\[","", pubs)
> pubs <- gsub("\\]","", pubs)
> pubs <- gsub("\\]","", pubs)
> pubs <- gsub("\\\\","", pubs)
> #add space before and after
> pubs <- paste("", pubs, "")
> 
> 
> 
> #I have 52k pub names and  1 million unique transactions
> #so try to filter out very common entries that are dre defo not alcohol related to reduce computation time
> # words <- unique_transactions$description
> # #get rid of numbers
> # words <- gsub("1|2|3|4|5|6|7|8|9|0|,|-", "", words)
> # words <- unique(words)
> # frequency <- data.table(table(unlist(strsplit(words, split = " "))))
> # frequency <- frequency[order(-N)]
> #based on the inspection of the first 500, we can use these words to filter out
> #non alcohol related purchases
> 
> nonalcohol <- c("tesco", "stores", "group", "uber", "withdrawal", "sainsb",
+                 "asda", "coop", "lidl", "aldi", "waitrose", "spencer", "spar",
+                 "petrol", "shell", "esso", "morrisons", "hotel", "travel",
+                 "google", "restaurants", "pizza", "starbucks", "next", "superstore",
+                 "garden", "nandos", "subway", "primark", "greggs", "argos", 
+                 "superdrug", "costa", "amazon", "internet", "coffee", "cafe","caffe",
+                 "donalds", "spotify", "smith", "manger", "kfc", "ticket",
+                 "boots", "domestic", "food", "grocery","h&m","pharmacy",
+                 "ikea", "poundland", "cineworld", "lewis", "dental", "debenhams",
+                 "parking", "wilko", "halfords", "zara", "iceland", "homebase",
+                 "wagamama", " atm ", " fee ", "int'l", "mortgage", "weightwatchers",
+                 "energy", "standing order", "national trust", "steak", "burger king",
+                 "post office", "lloyds", "virgin active", "fitness", "co-op",
+                 "theatre", "park view nursery", "farm park", "health", "hamburgers")
> 
> #create non-alcohol flag, we can exclude these when matching the pub names
> unique_transactions_all[, nonalc := stri_detect_regex(description, paste(nonalcohol, collapse = "|"))]
> #create alcohol flag for subset of data
> unique_transactions_all[nonalc == FALSE, alc := stri_detect_regex(description, paste(pubs, collapse = "|"))]
Killed
